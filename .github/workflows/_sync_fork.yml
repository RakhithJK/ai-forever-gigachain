name: Sync with upstream
run-name: Sync by @${{ github.actor }}

on: workflow_dispatch

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          ref: dev

      - name: Set up Git config
        run: |
          git config --global user.email "github_actions@no-reply.com"
          git config --global user.name "Github actions"

      - name: Fetch upstream changes
        run: |
          git remote add langchain https://github.com/langchain-ai/langchain.git
          git fetch langchain


      - name: Merge .toml files from langchain/master into gigachain/dev
        run: |
          # Create a temporary branch for the merge
          git checkout -b temp-merge-branch
          
          # Merge only the .toml files
          git checkout langchain/master -- '**/*.toml'
          
          # Handle .toml conflicts by updating lines containing 'version' 
          # only if the version in langchain is newer
          for file in $(git diff --name-only --diff-filter=U | grep '\.toml$'); do
            awk '
            function compare_versions(v1, v2) {
              n1 = split(v1, a1, ".")
              n2 = split(v2, a2, ".")
              for (i = 1; i <= (n1 > n2 ? n1 : n2); i++) {
                if (a1[i] != a2[i]) {
                  return (a1[i] + 0) > (a2[i] + 0)
                }
              }
              return 0
            }
            function replace_lang_with_giga(line) {
              gsub(/lang/, "giga", line)
              return line
            }
            BEGIN {FS=" = "; OFS=" = "}
            /<<<<<<< HEAD/ {in_gigachain = 1; next}
            /=======/ {in_gigachain = 0; in_langchain = 1; next}
            />>>>>>>/ {in_langchain = 0; next}
            {
              if (in_gigachain) {
                gigachain_lines[NR] = $0
                gigachain_version[$1] = $2
              } else if (in_langchain) {
                langchain_lines[NR] = $0
                langchain_version[$1] = $2
              } else {
                gigachain_lines[NR] = $0 # no conflict lines
              }
            }
            END {
              for (i = 1; i <= NR; i++) {
                if (i in langchain_lines && gigachain_lines[i] ~ /version/) {
                  if (compare_versions(langchain_version[$1], gigachain_version[$1])) {
                    print replace_lang_with_giga(langchain_lines[i]) # Use langchain line for newer version and replace "lang" with "giga"
                  } else {
                    print gigachain_lines[i] # Use gigachain line if version is not newer
                  }
                } else {
                  print gigachain_lines[i] # Use gigachain line for other fields
                }
              }
            }
            ' $file > temp_file

            # Overwrite the original file with the resolved content
            mv temp_file $file
            
            # Add the resolved file to the staging area
            git add $file
          done
          
          # Commit the changes
          git commit -m "Merge .toml files from langchain/master into gigachain/dev with conflict resolution" || echo "No changes to commit"
    
          # Switch back to the dev branch and merge the temporary branch
          git checkout dev
          git merge temp-merge-branch
    
          # Delete the temporary branch
          git branch -d temp-merge-branch

      
      - name: Accept incoming changes if not modified in gigachain
        run: |
          git commit -m "Merge langchain/master into gigachain/dev with automated conflict resolution for .toml and .lock files" || echo "No changes to commit"

      - name: Merge changes from upstream
        run: git merge -Xours --allow-unrelated-histories langchain/master

      - name: Fix gigachain naming
        run: |
          echo "Fix gigachain naming"
          # chmod +x .github/scripts/fix_gigachain_naming.sh
          # .github/scripts/fix_gigachain_naming.sh ./libs/
          # .github/scripts/fix_gigachain_naming.sh ./templates/
          
          find ./libs -type f -name '*.toml' | while read -r file; do
            # Use sed to perform the replacements and create a temporary file
            sed -i -E 's/LangChain/Gigachain/g' $file
            sed -i -E '/langchain-ai/! {/langchain-server/! s/langchain-/gigachain-/g}' $file
            sed -i -E 's/langchain =/gigachain =/g' $file
            sed -i -E 's|langserve|gigaserve|g' $file
            sed -i -E 's|name = "langchain"|name = "gigachain"|g' $file
          done

          
          find ./templates -type f -name '*.toml' | while read -r file; do
            # Use sed to perform the replacements and create a temporary file
            sed -i -E '/langchain-anthropic/! s/langchain-/gigachain-/g' $file
            sed -i -E 's/langchain =/gigachain =/g' $file
            sed -i -E 's|langserve|gigaserve|g' $file
          done
          
          echo "Replacements completed in all .toml files."
          git add -A
          git diff HEAD
          git commit -m "fix naming"
      
      - name: Create pull request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          base: dev
          branch: "auto-pr-branch"
          title: Sync with upstream changes
          draft: true
          body: Automatically syncing fork repository with upstream changes
        continue-on-error: true

      - name: Echo on error
        if: failure()
        run: |
          echo "Can be some problems with WORKFLOW_TOKEN. It is located in repository secrets(vaild for 90 days). Regenerate it or put there new personal access token."
