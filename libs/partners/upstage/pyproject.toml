<<<<<<< HEAD

[tool.poetry]
name = "gigachain-upstage"
=======
[tool.poetry]
name = "langchain-upstage"
>>>>>>> langchan/master
version = "0.1.5"
description = "An integration package connecting Upstage and LangChain"
authors = []
readme = "README.md"
repository = "https://github.com/langchain-ai/langchain"
license = "MIT"
<<<<<<< HEAD
packages = [
    {include = "langchain_postgres"}
]
=======
>>>>>>> langchan/master

[tool.poetry.urls]
"Source Code" = "https://github.com/langchain-ai/langchain/tree/master/libs/partners/upstage"

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"
<<<<<<< HEAD
langchain-core = ">=0.1.52,<0.3"
=======
langchain-core = ">=0.2.0,<0.3"
>>>>>>> langchan/master
langchain-openai = "^0.1.3"
pymupdf = "^1.24.1"
requests = "^2.31.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
<<<<<<< HEAD
pytest = "^7.4.3"
=======
pytest = "^7.3.0"
>>>>>>> langchan/master
freezegun = "^1.2.2"
pytest-mock = "^3.10.0"
syrupy = "^4.0.2"
pytest-watcher = "^0.3.4"
pytest-asyncio = "^0.21.1"
<<<<<<< HEAD
gigachain-openai = { path = "../openai", develop = true }
gigachain-core = { path = "../../core", develop = true }
docarray = "^0.32.1"
pydantic = "^1.10.9"
gigachain-standard-tests = { path = "../../standard-tests", develop = true }
=======
langchain-openai = { path = "../openai", develop = true }
langchain-core = { path = "../../core", develop = true }
docarray = "^0.32.1"
pydantic = "^1.10.9"
langchain-standard-tests = { path = "../../standard-tests", develop = true }
>>>>>>> langchan/master

[tool.poetry.group.codespell]
optional = true

[tool.poetry.group.codespell.dependencies]
<<<<<<< HEAD
codespell = "^2.2.6"
=======
codespell = "^2.2.0"
>>>>>>> langchan/master

[tool.poetry.group.test_integration]
optional = true

[tool.poetry.group.test_integration.dependencies]

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
<<<<<<< HEAD
ruff = "^0.1.8"
=======
ruff = "^0.1.5"
>>>>>>> langchan/master

[tool.poetry.group.typing.dependencies]
mypy = "^0.991"
types-requests = ">=2.31.0"
<<<<<<< HEAD
gigachain-core = { path = "../../core", develop = true }
=======
langchain-core = { path = "../../core", develop = true }
>>>>>>> langchan/master

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
<<<<<<< HEAD
gigachain-core = { path = "../../core", develop = true }

[tool.ruff.lint]
select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  "I",  # isort
  "T201", # print
=======
langchain-core = { path = "../../core", develop = true }

[tool.ruff.lint]
select = [
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
>>>>>>> langchan/master
]

[tool.mypy]
disallow_untyped_defs = "True"

[tool.coverage.run]
<<<<<<< HEAD
omit = [
    "tests/*",
]
=======
omit = ["tests/*"]
>>>>>>> langchan/master

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
#
# https://github.com/tophat/syrupy
# --snapshot-warn-unused    Prints a warning on unused snapshots rather than fail the test suite.
<<<<<<< HEAD
addopts = "--strict-markers --strict-config --durations=5"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
=======
addopts = "--snapshot-warn-unused --strict-markers --strict-config --durations=5"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
  "requires: mark tests as requiring a specific library",
  "asyncio: mark tests as requiring asyncio",
>>>>>>> langchan/master
  "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
